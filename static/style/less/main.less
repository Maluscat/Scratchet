// out: ../main.css
@import 'var.less';

* {
  box-sizing: border-box;
}

:root {
  --mouseX: -100%;
  --mouseY: -100%;
  --scale: 100%;
  --strokeWidth: @initial-stroke-width;
  --picker-size: @initial-stroke-width;
  --picker-color: var(--canvas-color);
  --canvas-color: @canvas-color;
  --overlay-margin: .8rem;
  --overlay-gap: @overlay-gap;

  @media (max-width: 1080px) {
    --overlay-margin: .575rem;
    --overlay-gap: .425rem;
    font-size: calc(0.51vw + 0.25vh + 9.71px);
  }
  @media (max-width: 650px) {
    --overlay-margin: .35rem;
    --overlay-gap: .325rem;
  }
}

body {
  // For centering the notifications
  display: flex;
  justify-content: center;
  background-color: @background-color;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
  color: @main-color;
  // This is to prevent a gray flash before the first room has been loaded
  &.initial-load {
    background-color: var(--canvas-color);
  }
  > *:not(#canvas-container) {
    z-index: (@high-z-index + 10);
  }
}

canvas, #canvas-container {
  width: 100%;
  height: 100%;
}

#canvas-container {
  transition: filter .05s ease-in-out;
  body.inactive & {
    cursor: not-allowed;
  }
  body.active-utility-wheel & {
    filter: @utilWheel-background-blur;
  }
}

canvas {
  position: absolute;
  background-color: var(--canvas-color);
  outline: 6px solid @background-color;
  border-radius: 0;
  &:not(.inactive):not(.remove):not(:only-child) {
    @media not (prefers-reduced-motion) {
      animation: translateIn @canvas-anim-duration-inOut ease;
    }
    .canvasKeyframes.translateIn(72.5%, 0);
    @media (orientation: portrait) {
      .canvasKeyframes.translateIn(0, 72.5%);
    }

    #canvas-container.block-inout-animation & {
      animation-duration: 0s;
    }
  }

  &.inactive, &.remove {
    visibility: hidden;
    pointer-events: none;
    border-radius: @general-border-radius;
  }
  &.inactive {
    @media not (prefers-reduced-motion) {
      animation: translateOut @canvas-anim-duration-inOut ease;
    }
    .canvasKeyframes.translateOut(-30%, 0);
    @media (orientation: portrait) {
      .canvasKeyframes.translateOut(0, -30%);
    }
  }
  &.remove {
    @media not (prefers-reduced-motion) {
      outline-width: 25vmax;
      animation: canvasRemove @canvas-anim-duration-remove ease !important;
    }
    .canvasKeyframes.remove();
  }

  body.inactive & {
    pointer-events: none;
  }
}

button, input {
  display: block;
  font-family: inherit;
  font-size: 1em;
  color: inherit;
  padding: 0;
  margin: 0;
  border: none;
}
button {
  .buttonStyle(@overlay-bg);
  cursor: pointer;
}

input:invalid {
  border-color: @invalid-color !important;
  background-color: @invalid-overlay-bg !important;
}

// ---- Positioning ----
.button-group,
.horizontal {
  gap: var(--overlay-gap);
}

.button-group {
  display: inline-flex;
  flex-direction: column;
  &.right {
    align-items: flex-end;
  }
}

.horizontal, .button-wrapper {
  display: flex;
  align-items: center;
}
.horizontal {
  flex-direction: row;
}

// ---- Global overrides ----
.has-pointer-events {
  pointer-events: auto !important;
}

.no-border {
  border: none !important;
}

// ---- Overlays & groups ----
.overlay {
  position: absolute;
  pointer-events: none;
  &.bottom {
    bottom: var(--overlay-margin);
  }
  &.left {
    left: var(--overlay-margin);
  }
  &.top {
    top: var(--overlay-margin);
  }
  &.right {
    right: var(--overlay-margin);
  }

  &.self-centered {
    align-self: center;
  }

  .label,
  .button,
  .hover-overlay,
  .overlay-input:focus,
  .sl89-track {
    .generalBorder(@overlay-border-dims);
    z-index: (@high-z-index + 9);
    user-select: none;
    background-color: @overlay-bg;
    box-sizing: content-box;
    padding: @overlay-padding;
    transition: transform .075s ease;
  }
  .label,
  .button,
  .overlay-input,
  .sl89-thumb,
  .sl89-track,
  .slider-hue-indicator {
    border-radius: 100px;
    pointer-events: auto;
  }

  body.inactive & {
    .sl89-thumb,
    .sl89-thumb * {
      pointer-events: none;
    }
    .overlay-input:not(.persistent),
    .floating-overlay-wrapper {
      display: none;
    }
    .button:not(.persistent),
    .sl89-track {
      pointer-events: none;
      transform: scale(.915);
      background-color: @overlay-bg--inactive !important;
      color: @main-color--inactive !important;
    }
  }
  &.inactive:not(.active) {
    display: none;
  }
}

.panel {
  .generalBorder(@panel-border-dims);
  display: inline-flex;
  flex-direction: column;
  background-color: @panel-bg;
  border-radius: @panel-border-radius-with-border;
  backdrop-filter: @panel-backdrop-blur;
  .button {
    .buttonStyle(@panel-btn-bg);
    background-color: @panel-btn-bg;
  }
  &.full-size {
    display: block;
    height: 70vh;
    width: 75vw;
    font-size: .92rem;
    padding: 0 min(1.5em, calc(.5em + 1.55vmin));
    background-color: @panel-fullsize-bg;
    overflow: auto;
  }
}

.overlay-input,
.utility-wheel .uw-section-content {
  .surroundingTextShadow(var(--canvas-color), 1px, 2px, .25px);
}
.overlay-input {
  @extra-padding: .4rem;
  z-index: @high-z-index !important;
  white-space: nowrap;
  font-size: 1.025em;
  background-color: transparent;
  padding-top: @overlay-padding;
  padding-bottom: @overlay-padding;
  // Overwriting `.overlay.overlay-input:focus` styles (see above)
  padding-left: @extra-padding !important;
  padding-right: @extra-padding !important;
  // Lessen the changed position caused by the extra padding
  margin: 0 -(@extra-padding / 2);
  &.invalid {
    outline: 3px solid @invalid-color;
    transition: outline .1s ease-out;
  }
  br {
    display: none;
  }
}

.button-group {
  .button {
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
    width: @overlay-button-dims;
    height: @overlay-button-dims;
    > svg {
      width: @overlay-svg-dims;
      height: @overlay-svg-dims;
    }
  }
}

.button-wrapper {
  position: relative;
  @media (hover: hover) {
    &:hover .hover-overlay:not(.no-hover) {
      display: block;
    }
  }
  .floating-overlay-wrapper {
    // Creating a hoverable but still invisible area 
    @floating-padding: (@overlay-button-dims / 2) + @overlay-padding;
    padding: 0 @floating-padding;
    margin: 0 -@floating-padding;
    z-index: (@high-z-index + 8);

    position: absolute;
    top: 0;
    .overlay.left & {
      left: 100%;
    }
    .overlay.right & {
      right: 100%
    }
  }
  .hover-overlay {
    display: none;
    padding: .375em .8em;
    margin: 0 .15em;
    border-radius: @general-border-radius;
    white-space: nowrap;
    &.active {
      display: block;
    }
    > ul {
      margin: 0;
      list-style: none;
      padding: .1875em;
      .item {
        display: block;
        padding: .1875em;
        &:hover {
          font-weight: bold;
        }
      }
    }
  }
}

.sl89-thumb {
  background-color: @slider-thumb-color;
  width: @slider-thumb-dims;
  height: @slider-thumb-dims;
  &:hover {
    background-color: @slider-thumb-color--hover;
  }
}

body > .utility-wheel {
  font-size: .935rem;
  z-index: (@high-z-index + 11) !important;
  .uw-section-target {
    background: radial-gradient(at 0 0, @utilWheel-default-gradient, transparent calc(var(--utilWheel-wheel-size) * .81));
  }
  .uw-section-content {
    width: @utilWheel-content-size;
    height: @utilWheel-content-size;
    .action-wrapper {
      gap: @utilWheel-content-gap;
      > svg {
        width: @utilWheel-svg-dims;
        height: @utilWheel-svg-dims;
      }
    }
  }
}
.utility-wheel {
  .uw-section-content {
    &.uw-bottom .wrapper > svg {
      order: -1;
    }
  }
}
.action-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
}

#indicator-container {
  pointer-events: none;
  > * {
    position: absolute;
    left: 0;
    top: 0;
    &:not(.active) {
      display: none;
    }
  }

  body.inactive &,
  body.active-utility-wheel & {
    display: none;
  }
}

#indicator-brush, #indicator-eraser {
  @draw-indicator-border-size: 2px;
  transform:
    translate(calc(var(--mouseX) - var(--strokeWidth) / 2), calc(var(--mouseY) - var(--strokeWidth) / 2))
    scale(calc(var(--scale) * 100%));
  width: var(--strokeWidth);
  height: var(--strokeWidth);
  border-radius: 1000px;
  outline: calc(@draw-indicator-border-size / var(--scale)) solid @draw-indicator-color;
}
#indicator-eraser {
  &.erasing {
    background-color: @draw-indicator-color;
  }
}
#indicator-picker {
  @picker-indicator-dims: 1px;
  transform:
    translate(calc(var(--mouseX) - @initial-stroke-width / 2), calc(var(--mouseY) - @initial-stroke-width / 2));
  width: @initial-stroke-width;
  height: @initial-stroke-width;
  .crosshair {
    &::before, &::after {
      content: '';
      position: absolute;
      box-sizing: border-box;
      background-color: @draw-indicator-color;
    }
    &::before {
      height: 100%;
      width: @picker-indicator-dims;
      left: calc(50% - (@picker-indicator-dims / 2));
    }
    &::after {
      width: 100%;
      height: @picker-indicator-dims;
      top: calc(50% - (@picker-indicator-dims / 2));
    }
  }
  .value-indicator {
    width: var(--picker-size);
    height: var(--picker-size);
    background-color: var(--picker-color);
    transform:
      translate(calc(-50% + @initial-stroke-width / 2), calc(50% - @initial-stroke-width / 2))
      translate(1.75em, -1.75em);
      // translate(calc(1.25em + var(--picker-size) * .25), calc(-1.25em + var(--picker-size) * -.25));
    position: absolute;
    bottom: 0;
    left: 0;
    border-radius: 1000px;
    border: 2px solid @draw-indicator-color;
    outline: 2px solid var(--canvas-color);
  }
}

#hit-border {
  @hit-border-size: 2px;
  // TODO This is a repeating pattern
  pointer-events: none;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  border: 0px solid transparent;
  transition: border .1s ease-in;
  &.hit-left {
    border-left: @hit-border-size solid @draw-indicator-color;
  }
  &.hit-top {
    border-top: @hit-border-size solid @draw-indicator-color;
  }
  &.hit-right {
    border-right: @hit-border-size solid @draw-indicator-color;
  }
  &.hit-bottom {
    border-bottom: @hit-border-size solid @draw-indicator-color;
  }
}

#settings-panel {
  --utilWheel-center-size: 4.5em;
  --utilWheel-wheel-size: 17em;
  --utilWheel-gradient-stop: 14.25em;
  --utilWheel-section-color: hsl(0, 0%, 18%);

  .settings-utility-wheel {
    font-size: 1rem;
    display: flex;
    margin: auto;
    max-width: 57.5em;
    > * {
      padding: .75em 0;
    }
  }
  .utility-wheel-container {
    flex: 1;
    overflow: hidden;
    padding-right: min(1em, 1vw);
    border-right: 2px solid @slider-thumb-color;
  }
  .uw-configuration-wheel {
    font-size: .925em;
    width: 100%;
    display: block;
    position: relative;
    top: 50%;
    left: 50%;
    .uw-section-content {
      height: 16em;
      width: 16em;
    }
  }
  .actions-container {
    padding-left: min(3em, 2.5vw);
    user-select: none;
    width: max-content;
    display: grid;
    grid-template-columns: 1fr 1fr;
    font-size: .875em;
    gap: 2em 0;
  }
  .action-wrapper {
    gap: .4rem;
    &:hover {
      transform: scale(1.06);
    }
    > svg {
      order: -1;
      width: 2em;
      height: 2em;
    }
  }
}

#notification-overlay {
  display: flex;
  flex-direction: column;
  align-items: center;
  .notification {
    text-align: center;
    padding: .3em 1.5em;
    overflow: hidden;
    animation: shiftIn .2s ease;
    transition:
      all .2s ease,
      color .1s ease,
      opacity .15s ease;
    &.remove {
      color: transparent;
      opacity: 0;
      height: 0;
      padding: 0;
      border: none;
      margin-bottom: 0;
    }
    @keyframes shiftIn {
      from {
        opacity: 0;
        transform: translateY(-.5em);
      }
    }
  }
}

#prompt-wrapper {
  .header {
    font-size: 1.15rem;
    padding: 1em 1.5em;
    width: 100%;
    font-weight: bold;
    text-align: center;
    background-color: @prompt-header-bg;
    border-top-left-radius: @general-border-radius;
    border-top-right-radius: @general-border-radius;
  }
  .buttons {
    display: flex;
    justify-content: center;
    gap: @overlay-gap;
    padding: 1.2em 1.65em;
    width: 100%;
  }
  .button {
    padding: .475em 1em;
  }
}

#toolbar {
  width: min-content;
  gap: calc(@toolbar-padding - @overlay-border-dims);
  border-radius: 100px;
  padding: @toolbar-padding;
  .button {
    width: @toolbar-button-dims;
    height: @toolbar-button-dims;
    &.active {
      background-color: @panel-btn-bg;
    }
    &:not(.active) {
      background-color: transparent;
      border: none;
      margin: @overlay-border-dims;
    }
    > svg {
      width: @toolbar-svg-dims;
      height: @toolbar-svg-dims;
    }
  }
}

#tool-config-bar {
  min-height: @config-bar-height;
  .sl89-track, .label {
    height: @config-bar-height;
    box-sizing: border-box;
  }
  .sl89-track {
    width: 12em;
  }
  .label {
    display: flex;
    align-items: center;
    font-size: .975rem;
    padding: @overlay-padding (@overlay-padding * 3.5);
    gap: calc(var(--overlay-gap) * .75);
    input {
      // appearance: none;
      margin: 0;
    }
  }

  @media (max-width: 600px) {
    &[data-tool="brush"] {
      flex-direction: column;
    }
  }
  @media (max-width: 380px) {
    .sl89-track {
      width: 10em;
    }
  }
}

.hue-slider {
  .slider-hue-indicator {
    border: 4px solid var(--canvas-color);
    height: 100%;
  }
  .sl89-track {
    background-image: linear-gradient(to right,
      hsl(0, 75%, 70%),
      hsl(45, 75%, 70%),
      hsl(90, 75%, 70%),
      hsl(135, 75%, 70%),
      hsl(180, 75%, 70%),
      hsl(225, 75%, 70%),
      hsl(270, 75%, 70%),
      hsl(315, 75%, 70%),
      hsl(360, 75%, 70%)
    );
  }
}
.width-slider {
  .sl89-thumb {
    width: @slider-width-thumb-width;
    display: flex;
    justify-content: center;
    align-items: center;
  }
}

#user-list-wrapper,
#room-list {
  .item.current::after {
    margin-left: .28em;
  }
}
#user-list-wrapper {
  .item {
    transition: color .1s ease-in-out;
    &.current::after {
      content: '(You)';
    }
    &.inactive {
      opacity: .5;
    }
  }
}
#room-list {
  .item.current::after {
    content: '(Current)';
  }
}

#join-room-overlay-input {
  max-width: 8em;
  text-align: center;
}

#copy-room-link-overlay {
  position: relative;
  overflow: hidden;
  .copied-indicator {
    visibility: hidden;
    opacity: 0;
    transform: scale(1.11);

    display: flex;
    justify-content: center;
    align-items: center;
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    background-color: @overlay-bg;
    border-radius: inherit;
    transition:
      opacity .07s ease-in-out,
      all .14s ease;
    > svg {
      margin-left: .1em;
      width: 1.5em;
      height: 1.5em;
    }
  }
  &.copied .copied-indicator {
    visibility: visible;
    opacity: 1;
    transform: none;
  }
}

#scale-slider {
  display: flex;
  align-items: center;
  gap: (@overlay-gap / 2);
  height: @scaleSlider-height;
  .scale-button, .sl89-track, .sl89-thumb {
    height: 100%;
  }
  .scale-button {
    padding: .18em .5em;
    font-size: .775rem;
  }
  .sl89-track {
    width: @scaleSlider-width;
    padding: 0;
  }
  .sl89-thumb {
    body.initial-load & {
      visibility: hidden;
    }
  }
}
